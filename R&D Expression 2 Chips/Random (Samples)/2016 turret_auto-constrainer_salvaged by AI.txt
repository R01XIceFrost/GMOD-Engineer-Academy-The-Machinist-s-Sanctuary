@name Turret Auto-constrainer
@inputs 
@outputs 
@persist [Col Mat Ents]:array
@trigger 

#Source: https://youtu.be/ff1Nz65NXoA?si=8v7Uc5H4y9PRsWwW by Enyx

if (first()) {    
    runOnChat(1)
    runOnLast(1)

    hint("Type /turret, /turretbase or /base while looking at the entity in question, then type /finish when all 3 are marked.", 8)

    function number isSelected(Ent:entity, Num:number) {
        QueryEnts = Ents:clone()
        QueryEnts:removeEntity(Num)
        if (Ent != QueryEnts[1, entity]) {
            if (Ent != QueryEnts[2, entity]) {
                return 1    
            } else {
                return 0    
            }   
        } else {
            return 0    
        }  
    }

    function void returnVisual(Num:number) {
        Ents[Num, entity]:setColor(Col[Num, vector])  
        Ents[Num, entity]:setMaterial(Mat[Num, string]) 
        Ents[Num, entity] = noentity()      
    }

    function void markUp(Num:number) {
        Ent = owner():aimEntity()
        if (isSelected(Ent, Num) & !Ent:isWorld()) {
            returnVisual(Num)

            Col[Num, vector] = Ent:getColor()
            Mat[Num, string] = Ent:getMaterial()
            Ents[Num, entity] = Ent

            Ent:setMaterial("models/debug/debugwhite")
            SetCol = vec()
            SetCol[Num] = 255
            Ent:setColor(SetCol)
        } else {
            printColor(vec(0, 255, 255), "[E2] That entity is already selected as another part.")
        }
    }
}

if (chatClk(owner())) {
    if (lastSaid():lower() == "/turret") {
        markUp(1)   
    } 
    if (lastSaid():lower() == "/turretbase") {
        markUp(2)   
    }
    if (lastSaid():lower() == "/base") {
        markUp(3)   
    }
    if (lastSaid():lower() == "/finish") {
        if (Ents[1, entity]:isValid()) {
            if (Ents[2, entity]:isValid()) {
                if (Ents[3, entity]:isValid()) {
                    printColor(vec(0, 255, 255), "[E2] Please disable gravity on the turret and remember to set the weights of the turret base and base.")

                    # Use axis/ballsocket manually via constraints or Wiremod tool  E2 does not support axisTo or advBallsocketTo without external extensions

                    printColor(vec(255, 0, 0), "[E2] Constraints would need to be done via tools or other methods. This is a placeholder.")
                    selfDestruct()
                }
            }
        }    
    }
}

if (last()) {
    returnVisual(1) 
    returnVisual(2) 
    returnVisual(3)      
}
