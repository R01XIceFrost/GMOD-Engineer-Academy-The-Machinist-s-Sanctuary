@name Steering Wheel and Gauges
@inputs Active Engine:wirelink AD
@persist Wheeltilt [RPMg MPHg FUELg Eblock]:entity Rotations I Speedunits:string
@trigger none

#[

INFO:
https://web.archive.org/web/20150508102153/http://www.wiremod.com/forum/finished-contraptions/33365-reds-useful-e2s-thread.html

Since I'm tired of making a thread for every damn tool I make, I decided to just make this thread here. This covers a lot of em, some I'm sure you've probably seen.

Red's Useful E2s Thread-81980802ae.jpg
Holo steering wheel with 3 gauges and ignition. Should be self-explanatory as to how to set it up. It's built off an old dupe actually, you can adjust the steering wheel angle, size, how much it turns, and its model.
The gauges have a red needle each, which works only when driving, the ignition key switches on and off, and the wheel turns in direct proportion to your input. Pretty darn simple. I've been having computer issues, so I haven't gotten to test it well, but it should be fine.
Code:


]#


interval(25)
#This is a simple steering wheel and 3 gauges, one for fuel, one for RPM, and one for MPH.
#This isn't a particularly complex system, it's just for general purpose stuff, as a quick addon.
#looks acceptable, low-maintenance, easy to use.

if(dupefinished() | first())
    {   
        #You edit these only
        Wheel = 3       #Which wheel model you use
        Wheelsize = 1.2 #Size of the steering wheel
        Rotations = 0.5 #Rotations of wheel per full turning
        Wheeltilt = 0   #Tilt of your steering wheel
        Euro = 0        #Do you believe healthcare is a fundamental right?
        #DONT EDIT ANYTHING BELOW HERE!!

        if(Euro) {Speedunits = "km/h"} else {Speedunits = "mph"}
        Wheelmodel = "models/sprops/trans/stwheels/stwheel_"+Wheel+".mdl"
        entity():setAlpha(0)
        Eblock = Engine:entity("Entity")
        #Mph
        holoCreate(70,entity():toWorld(vec(6.5,0,1.75)),vec(1,1,1))
        holoAng(70,entity():toWorld(ang(-105,0,180)))
        holoModel(70,"models/sprops/trans/misc/gauge_3.mdl")
        holoParent(70,entity())
        MPHg = holoEntity(70)
        #
        holoCreate(1,MPHg:pos() + (MPHg:forward() * 0.5),vec(0.1,0.1,0.1))
        holoModel(1,"hq_cylinder")
        holoColor(1,vec(32,32,32))
        holoParent(1,MPHg)
        holoCreate(2,(MPHg:toWorld(vec(0.4,0,2))),vec(0.03,0.03,0.4))
        holoColor(2,vec(255,0,0))
        holoModel(2,"prism")
        holoParent(2,1)
        holoAng(2,holoEntity(1):toWorld(ang(0,90,90)))
        holoAng(1,MPHg:toWorld(ang(90,0,0)))
        
        #Rpm
        holoCreate(80,entity():toWorld(vec(3.75,-9.5,1)),vec(1,1,1))
        holoAng(80,entity():toWorld(ang(-105,0,180)))
        holoModel(80,"models/sprops/trans/misc/gauge_2.mdl")
        holoSkin(80,1)
        holoParent(80,entity())
        RPMg = holoEntity(80)
        #
        holoCreate(3,RPMg:pos() + (RPMg:forward() * 0.5),vec(0.1,0.1,0.1))
        holoModel(3,"hq_cylinder")
        holoColor(3,vec(32,32,32))
        holoParent(3,RPMg)
        holoCreate(4,(RPMg:toWorld(vec(0.6,0,1.5))),vec(0.02,0.02,0.3))
        holoColor(4,vec(255,0,0))
        holoModel(4,"prism")
        holoParent(4,3)
        holoAng(4,holoEntity(3):toWorld(ang(0,90,90)))
        holoAng(3,RPMg:toWorld(ang(90,90,90)))
        
        #Fuel
        holoCreate(90,entity():toWorld(vec(3.75,9.5,1)),vec(1,1,1))
        holoAng(90,entity():toWorld(ang(-105,0,180)))
        holoModel(90,"models/sprops/trans/misc/gauge_2.mdl")
        holoSkin(90,2)
        holoParent(90,entity())
        FUELg = holoEntity(90)
        #
        holoCreate(5,FUELg:pos() + (FUELg:forward() * 0.5),vec(0.07,0.07,0.1))
        holoModel(5,"hq_cylinder")
        holoColor(5,vec(32,32,32))
        holoParent(5,FUELg)
        holoCreate(6,(FUELg:toWorld(vec(0.6,0,1.5))),vec(0.02,0.02,0.3))
        holoColor(6,vec(255,0,0))
        holoModel(6,"prism")
        holoParent(6,5)
        holoAng(6,holoEntity(5):toWorld(ang(0,90,90)))
        holoAng(5,FUELg:toWorld(ang(130,90,90)))
        
        #Wheel
        holoCreate(7,entity():pos() + (entity():toWorld(ang(Wheeltilt-90,0,0)):forward() * 10),vec(Wheelsize,Wheelsize,Wheelsize))
        holoModel(7,Wheelmodel)
        holoAng(7,entity():toWorld(ang(Wheeltilt-90,0,0)))
        holoCreate(9,entity():pos() + (entity():toWorld(ang(Wheeltilt-90,0,0)):forward() * 5), vec(0.3,0.3,0.7))
        holoModel(9,"hq_cylinder")
        holoAng(9,entity():toWorld(ang(Wheeltilt,0,0)))
        holoColor(9,vec(32,32,32))
        holoCreate(10,entity():pos(),vec(0.3,0.3,0.3))
        holoModel(10,"hq_sphere")
        holoColor(10,vec(32,32,32))
        holoParent(10,entity())
        holoParent(9,10)
        holoParent(7,10)
        holoAng(10,entity():toWorld(ang(Wheeltilt,180,0)))
        
        #Ignition
        holoCreate(95,holoEntity(9):pos() + entity():right() * 1,vec(0.25,0.25,0.25))
        holoModel(95,"hq_cylinder")
        holoAng(95,holoEntity(9):toWorld(ang(90,90,0)))
        holoParent(95,entity())
        holoColor(95,vec(32,32,32))
        #key
        holoCreate(96,holoEntity(95):toWorld(vec(0,0,1)),vec(1,1,1))
        holoModel(96,"models/bull/buttons/key_switch.mdl")
        holoAng(96,holoEntity(95):angles())
        holoParent(96,entity())
        
        
    }
    
#MPH range is for 0-180 90-48.  Travel is 318
#RPM range is for 0-9 90-48.  Travel is 318
#Fuel range is for E-F 130-49.  Travel is 279

elseif(changed(Active))
    {
        holoAng(96,holoEntity(95):toWorld(ang(0,Active*90,0)))
    }
elseif(Active)
    {
        I++
        if(I >=3)
            {
                holoAng(3,RPMg:toWorld(ang(angnorm(90+((Engine:number("RPM")/9000)*318)),90,90)))
                holoAng(1,MPHg:toWorld(ang(angnorm(90+(((toUnit(Speedunits,Eblock:vel():length() * 1.25))/180)*318)),90,90)))
                holoAng(5,FUELg:toWorld(ang(angnorm(130+((Eblock:acfFuelLevel())*2.8)),90,90)))
                I = 0
            }
        
        if(changed(AD)) {holoAng(7,entity():toWorld(ang(270,angnorm(180+(AD*(Rotations*360))),0)))}
    }
