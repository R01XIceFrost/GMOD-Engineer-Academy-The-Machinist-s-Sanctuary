@name DakTek Hover Tank HUD Public V2
@inputs EGP:wirelink Pod:wirelink HoverDrive:entity Target:entity Targets:array Front Turret Left Right Rear Engine Heat MaxHeat Group1Cooldown Group1Ammo Group2Cooldown Group2Ammo Group3Cooldown Group3Ammo Group4Cooldown Group4Ammo
@outputs
@persist Size:vector2 Driver:entity ScaleW ScaleH SeatChanged Distance GroupCount GroupTable:array AmmoTable:array CooldownTable:array LastSound Prev:array PPos:vector Time
@trigger none
 
#Source: https://steamcommunity.com/groups/DakTek
 
#INSTRUCTIONS:
#Weld or weld parent the chip to the turret.
#Make sure the chip points forward.
#The Hud is setup for tanks, it can technically be used on other vehicles, but you won't have the right hitboxes.
#Wire stuff to their corresponding values.
#Front,Turret,Left,Right,LTread,RTread, and Rear are wired to hitbox health percentage outputs.
#engine is wired to the engine's health output.
#Heat and MaxHeat come from the engine.
#for the cooldowns wire it to the gun's cooldownpercent, not the cooldown itself, only wire it to one gun out of the group.
 
#Below in that area that says "EDIT VALUES" change the 4 group names to what you want them to be called.
#Do not change anything else.
#4 groups is the maximum.
 
if(first()|SeatChanged==1){
    GroupCount = 4
    #EDIT VALUES
    Group1Name = "Example Cannon"
    Group2Name = "N/A"
    Group3Name = "N/A"
    Group4Name = "N/A"
 
    GroupTable = array(Group1Name,Group2Name,Group3Name,Group4Name)
    AmmoTable = array(Group1Ammo,Group2Ammo,Group3Ammo,Group4Ammo)
    CooldownTable = array(Group1Cooldown,Group2Cooldown,Group3Cooldown,Group4Cooldown)
 
    Active = Pod["Active",number]
    Seat = Pod["Entity",entity]
 
    EGP:egpClear()
    EGP:egpResolution(vec2(),vec2(512))
    EGP:egpDrawTopLeft(0)
    Driver = Seat:driver()
    Size=egpScrSize(Driver)
    #ScaleW = egpScrW(Driver)/1920
    ScaleH = egpScrH(Driver)/1080
    ScaleW = ScaleH
 
 
    #Crosshair
    EGP:egpDrawTopLeft(1)
    EGP:egpCircleOutline(1,(Size/2),vec2(30*ScaleW,30*ScaleH))
    EGP:egpColor(1,vec4(50,255,50,250))
    EGP:egpLine(2,(Size/2)+vec2(0,25*ScaleH),(Size/2)+vec2(0,-25*ScaleH))
    EGP:egpColor(2,vec4(50,255,50,225))
    EGP:egpLine(3,(Size/2)+vec2(25*ScaleW,0),(Size/2)+vec2(-25*ScaleW,0))
    EGP:egpColor(3,vec4(50,255,50,225))
 
 
    #Radar
    EGP:egpBox(4,vec2(egpScrW(Driver)/2,egpScrH(Driver)/1.15),vec2(250*ScaleW,250*ScaleH))
    EGP:egpColor(4,vec4(25,150,25,225))
    EGP:egpCircle(5,vec2(egpScrW(Driver)/2,egpScrH(Driver)/1.15),vec2(100*ScaleW,100*ScaleH))
    EGP:egpColor(5,vec4(50,150,50,225))
    EGP:egpCircleOutline(6,vec2(egpScrW(Driver)/2,egpScrH(Driver)/1.15),vec2(100*ScaleW,100*ScaleH))
    EGP:egpColor(6,vec4(0,255,0,250))
    EGP:egpCircleOutline(7,vec2(egpScrW(Driver)/2,egpScrH(Driver)/1.15),vec2(75*ScaleW,75*ScaleH))
    EGP:egpColor(7,vec4(255,150,0,250))
    EGP:egpCircleOutline(8,vec2(egpScrW(Driver)/2,egpScrH(Driver)/1.15),vec2(50*ScaleW,50*ScaleH))
    EGP:egpColor(8,vec4(255,150,0,250))
    EGP:egpCircleOutline(9,vec2(egpScrW(Driver)/2,egpScrH(Driver)/1.15),vec2(25*ScaleW,25*ScaleH))
    EGP:egpColor(9,vec4(255,150,0,250))
 
    # Direction Indicator
    EGP:egpCircle(10,vec2(egpScrW(Driver)/2,egpScrH(Driver)/1.15),vec2(5*ScaleW,5*ScaleH))
    EGP:egpColor(10,vec4(255,255,50,250))
 
    ### Health hud
    EGP:egpBox(12,vec2(egpScrW(Driver)/4,egpScrH(Driver)/1.15),vec2(250*ScaleW,250*ScaleH))
    EGP:egpColor(12,vec4(25,150,25,225))
    #Front
    EGP:egpBox(13,vec2(egpScrW(Driver)/4,egpScrH(Driver)/1.125),vec2(120*ScaleW,60*ScaleH))
    EGP:egpColor(13,vec4(250,2.5,0,250))
    #Turret
    EGP:egpBox(14,vec2(egpScrW(Driver)/4,egpScrH(Driver)/1.2),vec2(80*ScaleW,50*ScaleH))
    EGP:egpColor(14,vec4(250,2.5,0,250))
    #Sides
    EGP:egpBox(15,vec2(egpScrW(Driver)/4+90*ScaleW,egpScrH(Driver)/1.125),vec2(50*ScaleW,70*ScaleH))
    EGP:egpColor(15,vec4(250,2.5,0,250))
    EGP:egpBox(16,vec2(egpScrW(Driver)/4-90*ScaleW,egpScrH(Driver)/1.125),vec2(50*ScaleW,70*ScaleH))
    EGP:egpColor(16,vec4(250,2.5,0,250))
    #Rear
    EGP:egpBox(17,vec2(egpScrW(Driver)/4-75*ScaleW,egpScrH(Driver)/1.20-50*ScaleH),vec2(50*ScaleW,20*ScaleH))
    EGP:egpColor(17,vec4(250,2.5,0,250))
    EGP:egpText(18,"Rear",vec2(egpScrW(Driver)/4-75-22.5*ScaleW,egpScrH(Driver)/1.20-85*ScaleH))
    EGP:egpColor(18,vec4(250,2.5,0,250))
    #Structure
    EGP:egpBox(19,vec2(egpScrW(Driver)/4+75*ScaleW,egpScrH(Driver)/1.20-50*ScaleH),vec2(50*ScaleW,20*ScaleH))
    EGP:egpColor(19,vec4(250,2.5,0,250))
    EGP:egpText(20,"Struc",vec2(egpScrW(Driver)/4+75-22.5*ScaleW,egpScrH(Driver)/1.20-85*ScaleH))
    EGP:egpColor(20,vec4(250,2.5,0,250))
 
    EGP:egp3DTracker(21,entity():pos()) 
    EGP:egpCircle(22,vec2(0,0),vec2(50*ScaleW,50*ScaleH)) 
    EGP:egpColor(22,vec4(255,0,0,225)) 
    EGP:egpParent(22,21)
 
    #outline
    for(I=1,clamp(GroupCount,0,4)){
        EGP:egpBoxOutline(22+I,vec2(egpScrW(Driver)/1.175+50*ScaleW,(egpScrH(Driver)/5)+(12.5*ScaleH)-(200*ScaleH)+(I*(25*ScaleH))),vec2(400*ScaleW,25*ScaleH))
        EGP:egpColor(22+I,vec4(25,25,25,250))
    }
    #backing
    for(I=1,clamp(GroupCount,0,4)){
        EGP:egpBox(26+I,vec2(egpScrW(Driver)/1.175+50*ScaleW,(egpScrH(Driver)/5)+(12.5*ScaleH)-(200*ScaleH)+(I*(25*ScaleH))),vec2(400*ScaleW,25*ScaleH))
        EGP:egpColor(26+I,vec4(25,150,25,225))
    }
    #name
    for(I=0,clamp(GroupCount,0,4)){
        EGP:egpText(32+I,GroupTable[I,string],vec2(egpScrW(Driver)/1.25+50*ScaleW,(egpScrH(Driver)/5)+(3*ScaleH)-(200*ScaleH)+(I*(25*ScaleH))))
        EGP:egpColor(32+I,vec4(25,120,25,250))
    }
    #ammo
    for(I=1,clamp(GroupCount,0,4)){
        EGP:egpText(36+I,AmmoTable[I,number]:toString(),vec2(egpScrW(Driver)/1.25+50*ScaleW,(egpScrH(Driver)/5)+(3*ScaleH)-(200*ScaleH)+(I*(25*ScaleH))))
        EGP:egpColor(36+I,vec4(25,120,25,250))
    }    
 
    #Heat bar
    EGP:egpBox(41,vec2(egpScrW(Driver)/2+(155*ScaleW),egpScrH(Driver)/1.15),vec2(50*ScaleW,250*ScaleH))
    EGP:egpColor(41,vec4(25,25,25,225))
    EGP:egpBox(42,vec2(egpScrW(Driver)/2+(155*ScaleW),egpScrH(Driver)/1.15),vec2(40*ScaleW,250*ScaleH))
    EGP:egpColor(42,vec4(255,25,25,250))
 
    #Speed
    EGP:egpBox(43,vec2(egpScrW(Driver)/2+(260*ScaleW),egpScrH(Driver)/1.055),vec2(150*ScaleW,50*ScaleH))
    EGP:egpColor(43,vec4(25,25,25,225))
    EGP:egpText(44,"Speed (KPH)",vec2(egpScrW(Driver)/2+(190*ScaleW),egpScrH(Driver)/1.075))
    EGP:egpColor(44,vec4(0,255,0,250))
    EGP:egpText(45,0:toString(),vec2(egpScrW(Driver)/2+(190*ScaleW),egpScrH(Driver)/1.05))
    EGP:egpColor(45,vec4(0,255,0,250))
 
 
    SeatChanged = 0
    #LastSound = 0
}
interval(250)
AmmoTable = array(Group1Ammo,Group2Ammo,Group3Ammo,Group4Ammo)
CooldownTable = array(Group1Cooldown,Group2Cooldown,Group3Cooldown,Group4Cooldown)
Active = Pod["Active",number]
Seat = Pod["Entity",entity]
 
 
#fix health issue not showing in right color
EGP:egpColor(13,vec4(250*((100-Front)/100),2.5*Front,0,250))
EGP:egpColor(14,vec4(250*((100-Turret)/100),2.5*Turret,0,250))
EGP:egpColor(15,vec4(250*((100-Right)/100),2.5*Right,0,250))
EGP:egpColor(16,vec4(250*((100-Left)/100),2.5*Left,0,250))
EGP:egpColor(17,vec4(250*((100-Rear)/100),2.5*Rear,0,250))
EGP:egpColor(18,vec4(250*((100-Rear)/100),2.5*Rear,0,250))
EGP:egpColor(19,vec4(250*((100-Engine)/100),2.5*Engine,0,250))
EGP:egpColor(20,vec4(250*((100-Engine)/100),2.5*Engine,0,250))
 
if(Front<=0){EGP:egpColor(13,vec4(50,50,50,200))}
if(Turret<=0){EGP:egpColor(14,vec4(50,50,50,200))}
if(Right<=0){EGP:egpColor(15,vec4(50,50,50,200))}
if(Left<=0){EGP:egpColor(16,vec4(50,50,50,200))}
if(Rear<=0){EGP:egpColor(17,vec4(50,50,50,200))
    EGP:egpColor(18,vec4(50,50,50,200))
    }
if(Engine<=0){EGP:egpColor(21,vec4(50,50,50,200))
    EGP:egpColor(20,vec4(50,50,50,200))
    }
 
Distance = 100
if(Targets:count()>0){
    for(I=1,Targets:count()){
        if(Targets[I,entity]:pos():distance(HoverDrive:pos())>Distance){
        Distance = Targets[I,entity]:pos():distance(HoverDrive:pos())
        }
    }
}
 
if(Targets:count()>0){
    for(I=1,Targets:count()){
        if(Targets[I,entity]:isValid()){
        #if(!EGP:egpHasObject(500+I)){
        EGP:egpCircle(46+I,(Size/2),vec2(5*ScaleW,5*ScaleH))
        EGP:egpColor(46+I,vec4(255,50,50,225))
        #}
        Pos = entity():toLocal(Targets[I,entity]:pos())-entity():toLocal(HoverDrive:pos())
        EGP:egpPos(46+I,vec2(egpScrW(Driver)/2,egpScrH(Driver)/1.15)+vec2(-Pos:y()/Distance*100*ScaleW,-Pos:x()/Distance*100*ScaleH))
        }else{
        EGP:egpColor(46+I,vec4(255,50,50,0))
        }
    }
}
if(Target){
    EGP:egpPos(21,Target:pos())
    EGP:egpColor(21,vec4(255,0,0,225))
    #if(!EGP:egpHasObject(500)){
        EGP:egpCircleOutline(46,(Size/2),vec2(5*ScaleW,5*ScaleH))
        EGP:egpColor(46,vec4(50,255,50,225))
    #}
        Pos = entity():toLocal(Target:pos())-entity():toLocal(HoverDrive:pos())
        EGP:egpPos(46,vec2(egpScrW(Driver)/2,egpScrH(Driver)/1.15)+vec2(-Pos:y()/Distance*100*ScaleW,-Pos:x()/Distance*100*ScaleH)) 
        EGP:egpColor(22,vec4(255,50,50,75))
}else{
EGP:egpPos(21,Target:pos())
EGP:egpColor(21,vec4(255,0,0,0))
EGP:egpColor(22,vec4(255,0,0,0)) 
EGP:egpPos(46,entity():pos())
EGP:egpColor(46,vec4(50,255,50,0))
}
#fix direction indicator
#torso
EGP:egpLine(11,vec2(egpScrW(Driver)/2,egpScrH(Driver)/1.15),vec2(egpScrW(Driver)/2,egpScrH(Driver)/1.15)+vec2(0,-1*100*ScaleH))
EGP:egpColor(11,vec4(255,255,50,250))
#gyro
#EGP:egpLine(24,vec2(egpScrW(Driver)/2,egpScrH(Driver)/1.15),vec2(egpScrW(Driver)/2,egpScrH(Driver)/1.15)+vec2((entity():angles()-ang(0,90,0)-Gyro:angles()):forward():x()*100*ScaleW,(entity():angles()-ang(0,90,0)-Gyro:angles()):forward():y()*100*ScaleH))
EGP:egpLine(23,vec2(egpScrW(Driver)/2,egpScrH(Driver)/1.15),vec2(egpScrW(Driver)/2,egpScrH(Driver)/1.15)+ vec2(-entity():toLocal(HoverDrive:angles()):forward():y()*100*ScaleW,-entity():toLocal(HoverDrive:angles()):forward():x()*100*ScaleH) )
EGP:egpColor(23,vec4(50,50,50,250))
 
for(I=1,GroupCount){
        EGP:egpColor(26+I,vec4(2.5*CooldownTable[I,number],250*(100-CooldownTable[I,number])/100,0,225))
        EGP:egpText(36+I,AmmoTable[I,number]:toString(),vec2(egpScrW(Driver)/1.3+50*ScaleW,(egpScrH(Driver)/5)+(3*ScaleH)-(200*ScaleH)+(I*(25*ScaleH))))
    }
 
#Speed
 
if(Prev:count()>=2){Prev:removeNumber(1)}
NPos=entity():pos()
D=(NPos-PPos):length()
PPos=NPos
Time=curtime()
Prev:pushNumber((D/$Time)/(84480/1609))
Speed=round(Prev:average()*3.6)
 
 
EGP:egpText(45,Speed:toString(),vec2(egpScrW(Driver)/2+(190*ScaleW),egpScrH(Driver)/1.05))
#heat
EGP:egpBox(42,vec2(egpScrW(Driver)/2+(155*ScaleW),egpScrH(Driver)/1.15+(125*ScaleH)-(125*ScaleH*Heat/MaxHeat)),vec2(40*ScaleW,(250*ScaleH)*Heat/MaxHeat))
EGP:egpColor(42,vec4(255,25,25,250))
 
if(Heat/MaxHeat>1){
    if(LastSound == 0){
        soundPurge()
        soundPlay(1,2,"dak/Extra Sounds/Misc/warning_damage_main.wav")  
        LastSound=5
    }
}
if(LastSound>0){LastSound-=1} 
 
if(changed(Targets:count())){
    SeatChanged = 1
}
if(changed(Seat:driver())){SeatChanged = 1}