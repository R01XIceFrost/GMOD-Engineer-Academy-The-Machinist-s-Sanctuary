@name GG5-HOLO V1.3
@inputs [Gun]:entity [Active R PrevWeapon NextWeapon]:number Base:entity [Cam]:wirelink MuzzleVel [HAxis,VAxis,VAxis2]:entity
@persist [Position]:vector CamDistance FOV
@outputs [Ops]:number
@outputs [Self]:entity
@outputs [Filter]:array
@persist [Inertia GunAng]:angle
@persist [MaxElevation MaxDepression MinYaw MaxYaw RotateSpeed Unlock Interval]:number
@trigger Active PrevWeapon NextWeapon R

#Source: https://youtu.be/srQKDWfEIz8?si=EWXEROK_O7J_39Yb

#ChunderDownUndeR

#v1.1 Changes-wirelink to streamline setup, Mup,Mdown to prev/next weapon to instant wire to pod
#v1.2 Added Dual axis option (Wiring Vaxis2 will creat a seperate rotation joint for positive gun elevation)
#v1.3 No longer retarded
#Changed code to allow a sideways, or upside down gun which was otherwise unable to make turret work properly

#-----Setup-----
#R-Toggles turret lock/unlock
#PrevWeapon/NextWeapon-Zoom increment

#VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
#Haxis and Vaxis is the reference entity for center of rotation and oscillation respectively.

#To put it simple this is where your guns rotate on pitch and yaw axis (eg:turret ring can be haxis)
#having your Haxis destroyed infight will not destroy the turret / parenting. but will if you reset the chip
#Vaxis2 is an optinal input which will create a second joint of pitch for dual axis. Vaxis becomes point of depression and Vaxis2 becomes point of elevation with gun pitch

#NOTE:Dual axis guns cant have the E2 updated on an unfrozen/used dupe without displacing the gun
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#If you are working on a WIP do not unfreeze it to test if the turret works because that gets rid of parenting on some servers
#Dupe it and paste it if this happens and remember to save regulary babes

#Any other questions or issues please contact ChunderDownUndeR Via Steam/discord/Gmod

#ACF2 > Acf3


if(first()|dupefinished()){
    Self=entity()   
    GunAng = Self:toLocal(Gun:angles())
   # Orient=Self:toWorld(ang(0,GunAng:yaw(),0))

holoCreate(3,HAxis:pos(),vec(0.3),Self:toWorld(ang(0,GunAng:yaw(),0)))
holoAlpha(3,0)

holoCreate(2,VAxis:pos(),vec(0.3),Gun:angles():setRoll(0))  
holoAlpha(2,0)

VAxis:parentTo(holoEntity(2))
HAxis:parentTo(holoEntity(3))
holoParent(3,Self)
holoParent(2,3)
if(VAxis2){
holoCreate(4,VAxis2:pos(),vec(0.3),Gun:angles():setRoll(0))  
holoAlpha(4,0)   
holoParent(4,2)
VAxis2:parentTo(holoEntity(4))
Gun:parentTo(holoEntity(4))
}
else{Gun:parentTo(holoEntity(2))}
}
if ( changed(Active) ) {
    
    Interval = 100 #Higher the number the more the optimized
    
    MaxElevation = 15 #---How High you can aim up (in degrees)---#
    MaxDepression = 15 #---How Low you can aim down (in degrees)---#
    MinYaw = 360 #---Keep This at 360. If making a tank destroyer or bow gun, make it 20 and 20---#
    MaxYaw = 360 #---Keep This at 360. If making a tank destroyer or bow gun, make it 20 and 20---#
    Position = vec(-5, 14, 110) #---Where your camera will be floating---# (left/right,up/down,forward/back)
    CamDistance = 130 #---Camera Radius around the Camera Position---#
    RotateSpeed = 80 #---Turret Rotation Speed in Degrees per Second---#
  #  Self = entity() #---Ignore this shit, doesn't need to be touched---#
#  -DO NOT TOUCH ANYTHING ELSE UNDER THIS.
#--------------------------------------------------------------------------------------------------------------#
        # Automatic settings
    Filter = Filter = Gun:getConnectedEntities() # Ranger filter
    Filter:pushEntity(Gun)
    
    RotateSpeed/=20
  #  GunAng = Self:toLocal(Gun:angles())
    Inertia = shiftL(ang(Gun:inertia())):setRoll(0)
    Unlock = 0
    FOV = 90
    Cam["Filter",array]=Filter
    Cam["Position",vector]=Base:toWorld(Position)
    Cam["Parent",entity]=Base
    Cam["Activated",normal]=Active
    #Ra = Cam["Trace",ranger]
    Cam["Distance",normal] = CamDistance 
    
}
elseif ( inputClk() ) {
    if( PrevWeapon ) { FOV = max(FOV/2, 5) }
    elseif ( NextWeapon ) { FOV = min(FOV*2, 90)}
    elseif( changed(R) & R ) {
        if ( Unlock ) { Unlock = 0 }
        else { Unlock = 1 , interval(Interval) }
        
    }     
}

if(changed(FOV)){Cam["FOV",normal]=FOV}

if ( Unlock & clk() ) {
    
    T = ((Cam["Trace",ranger]:distance()*1.27) / 39.3701) / (MuzzleVel ) #0.032258 * Ra:distance() instead of (Ra:distance()*1.27) / 39.3701)

    Drift = (Base:vel() * T)
    Drop = (0.5 * 9.8 * T^2) * 39.3701 
    
    GunDir=(((Cam["Trace",ranger]:pos()- vec(0,0,-Drop)) - Drift) -Gun:massCenter()):normalized()      
   # GunDir = Gun:heading(AimPos)
    GunAng = angnorm(clamp(GunAng - clamp(heading(vec(), GunAng, Self:toLocalAxis(GunDir)), -RotateSpeed, RotateSpeed), ang(-MaxElevation,-MinYaw, 0), ang(MaxDepression, MaxYaw, 0)))
    
    GunYaw = Self:toWorld(ang(0,clamp(GunAng:yaw(),-MinYaw,MaxYaw),0))
    holoAng(3,GunYaw)
    GunPitch = ang(clamp(GunAng:pitch(),-MaxElevation,MaxDepression),0,0)
    if(VAxis2){
    holoAng(2,holoEntity(3):toWorld(GunPitch:setPitch(max(GunPitch:pitch(),0))))
    holoAng(4,holoEntity(2):toWorld(GunPitch:setPitch(min(GunPitch:pitch(),0))))
    
    }else{ 
       holoAng(2,holoEntity(3):toWorld(GunPitch))}

    interval(Interval)
    Ops=ops()
}

